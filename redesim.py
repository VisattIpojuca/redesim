import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Painel VISA Ipojuca", layout="wide")
st.title("Painel de Inspe√ß√µes - Vigil√¢ncia Sanit√°ria de Ipojuca")

# Fun√ß√£o para carregar dados da planilha do Google Sheets
@st.cache_data
def carregar_dados():
    url = 'https://docs.google.com/spreadsheets/d/1nKoAEXQ0QZOrIt-0CMvW5MOt9Q_FC8Ak/export?format=csv'
    df = pd.read_csv(url)
    df.columns = df.columns.str.strip().str.upper()  # Padroniza nomes das colunas
    return df

# Carregar dados
df = carregar_dados()

# Checagem e cria√ß√£o da coluna PREVIS√ÉO CONCLUS√ÉO (Coluna O = posi√ß√£o 14)
if 'PREVIS√ÉO CONCLUS√ÉO' not in df.columns and df.shape[1] >= 15:
    df['PREVIS√ÉO CONCLUS√ÉO'] = df.iloc[:, 14]

# Convers√£o de datas
df['ENTRADA'] = pd.to_datetime(df['ENTRADA'], errors='coerce')
df['1¬™ INSPE√á√ÉO'] = pd.to_datetime(df['1¬™ INSPE√á√ÉO'], errors='coerce')
df['CONCLUS√ÉO'] = pd.to_datetime(df['CONCLUS√ÉO'], errors='coerce')
df['PREVIS√ÉO CONCLUS√ÉO'] = pd.to_datetime(df['PREVIS√ÉO CONCLUS√ÉO'], errors='coerce')

# ==================== üîç FILTROS ====================
st.sidebar.header('Filtros')

filtro_protocolo = st.sidebar.multiselect('PROTOCOLO', df['PROTOCOLO'].dropna().unique())
filtro_estab = st.sidebar.multiselect('ESTABELECIMENTO', df['ESTABELECIMENTO'].dropna().unique())
filtro_cnpj = st.sidebar.multiselect('CNPJ', df['CNPJ'].dropna().unique())
filtro_atividade = st.sidebar.multiselect('ATIVIDADE', df['ATIVIDADE'].dropna().unique())
filtro_classificacao = st.sidebar.multiselect('CLASSIFICA√á√ÉO', df['CLASSIFICA√á√ÉO'].dropna().unique())
filtro_territorio = st.sidebar.multiselect('TERRIT√ìRIO', df['TERRIT√ìRIO'].dropna().unique())
filtro_situacao = st.sidebar.multiselect('SITUA√á√ÉO', df['SITUA√á√ÉO'].dropna().unique())

# Filtro de datas com sele√ß√£o tipo calend√°rio
data_hoje = datetime.today()
data_inicio, data_fim = st.sidebar.date_input(
    'ENTRADA (Per√≠odo)',
    [data_hoje, data_hoje]
)

# ==================== üîß APLICANDO FILTROS ====================
df_filtrado = df.copy()

if filtro_protocolo:
    df_filtrado = df_filtrado[df_filtrado['PROTOCOLO'].isin(filtro_protocolo)]
if filtro_estab:
    df_filtrado = df_filtrado[df_filtrado['ESTABELECIMENTO'].isin(filtro_estab)]
if filtro_cnpj:
    df_filtrado = df_filtrado[df_filtrado['CNPJ'].isin(filtro_cnpj)]
if filtro_atividade:
    df_filtrado = df_filtrado[df_filtrado['ATIVIDADE'].isin(filtro_atividade)]
if filtro_classificacao:
    df_filtrado = df_filtrado[df_filtrado['CLASSIFICA√á√ÉO'].isin(filtro_classificacao)]
if filtro_territorio:
    df_filtrado = df_filtrado[df_filtrado['TERRIT√ìRIO'].isin(filtro_territorio)]
if filtro_situacao:
    df_filtrado = df_filtrado[df_filtrado['SITUA√á√ÉO'].isin(filtro_situacao)]
if data_inicio and data_fim:
    df_filtrado = df_filtrado[
        (df_filtrado['ENTRADA'] >= pd.to_datetime(data_inicio)) &
        (df_filtrado['ENTRADA'] <= pd.to_datetime(data_fim))
    ]

# ==================== üìã RESUMO DA SELE√á√ÉO ====================
if len(filtro_protocolo) == 1:
    resumo = df_filtrado[df_filtrado['PROTOCOLO'] == filtro_protocolo[0]]

    if not resumo.empty:
        dados_resumo = resumo.iloc[0]
        st.sidebar.subheader('Resumo da Sele√ß√£o')
        st.sidebar.markdown(f"""
        **Estabelecimento:** {dados_resumo.get('ESTABELECIMENTO', '')}
        **Protocolo:** {dados_resumo.get('PROTOCOLO', '')}
        **Atividade:** {dados_resumo.get('ATIVIDADE', '')}
        **Classifica√ß√£o:** {dados_resumo.get('CLASSIFICA√á√ÉO', '')}
        **Territ√≥rio:** {dados_resumo.get('TERRIT√ìRIO', '')}
        **Situa√ß√£o:** {dados_resumo.get('SITUA√á√ÉO', '')}
        **Justificativa:** {dados_resumo.get('JUSTIFICATIVA', '')}
        """)

# ==================== üìä INDICADORES ====================
st.subheader('Indicadores de Desempenho')

if filtro_classificacao and data_inicio and data_fim:
    for classificacao in filtro_classificacao:
        dados = df_filtrado[df_filtrado['CLASSIFICA√á√ÉO'] == classificacao]

        if not dados.empty:
            total = len(dados)

            # üéØ Inspecionados no prazo (30 dias)
            dentro_prazo_visita = dados.apply(
                lambda row: (
                    pd.notnull(row['1¬™ INSPE√á√ÉO']) and 
                    (row['1¬™ INSPE√á√ÉO'] <= row['ENTRADA'] + timedelta(days=30))
                ) or (
                    pd.isnull(row['1¬™ INSPE√á√ÉO']) and 
                    (datetime.now() <= row['ENTRADA'] + timedelta(days=30))
                ),
                axis=1
            ).sum()

            perc_visita = dentro_prazo_visita / total * 100 if total > 0 else 0

            # üéØ Licenciados no prazo (90 dias)
            dentro_prazo_conclusao = dados.apply(
                lambda row: (
                    pd.notnull(row['CONCLUS√ÉO']) and 
                    (row['CONCLUS√ÉO'] <= row['ENTRADA'] + timedelta(days=90))
                ) or (
                    pd.isnull(row['CONCLUS√ÉO']) and 
                    (datetime.now() <= row['ENTRADA'] + timedelta(days=90))
                ),
                axis=1
            ).sum()

            perc_conclusao = dentro_prazo_conclusao / total * 100 if total > 0 else 0

            # üî• Mostrando no painel
            st.markdown(f"""
            ### {classificacao}
            - **Inspecionados no Prazo:** {perc_visita:.2f}%
            - **Licenciados no Prazo:** {perc_conclusao:.2f}%
            """)

# ==================== üìà GR√ÅFICOS ====================
g1 = px.bar(
    df_filtrado, 
    x='TERRIT√ìRIO', 
    color='CLASSIFICA√á√ÉO', 
    title='Inspe√ß√µes por Territ√≥rio'
)
st.plotly_chart(g1, use_container_width=True)

g2 = px.histogram(
    df_filtrado, 
    x='CLASSIFICA√á√ÉO', 
    title='Distribui√ß√£o por Classifica√ß√£o'
)
st.plotly_chart(g2, use_container_width=True)

# ==================== üóÇÔ∏è TABELA ====================
st.subheader('Tabela de Dados Filtrados')
st.dataframe(df_filtrado)

st.caption('Vigil√¢ncia Sanit√°ria de Ipojuca - 2025')
